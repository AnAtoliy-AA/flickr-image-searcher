{"version":3,"sources":["redux/bookmarks-reducer.ts","redux/imagesList-reducer.ts","shared/const.ts","components/ImageCard/ImageCard.tsx","components/ImagesContainer/ImagesContainer.tsx","services/image-api.ts","api-keys/api-keys.ts","redux/searchForm-reducer.ts","components/Paginator/Paginator.tsx","components/SearchForm/SearchForm.tsx","hooks/useDebounce.ts","components/MainPage/MainPage.tsx","components/BookmarksPage/BookmarksPage.tsx","components/SideBar/SideBar.tsx","components/IdleMask/IdleMask.tsx","components/Header/Header.tsx","components/Footer/Footer.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["ACTION_TYPE","ACTION_CONST","initialState","bookmarksList","String","bookmarksReducer","state","action","type","ADD_BOOKMARK","includes","payload","REMOVE_BOOKMARK","filter","b","DEFAULT_VALUES","FIRST_PAGE","EMPTY","TRUE","FALSE","SEARCH_DELAY_TIME","PAGE_SIZE","PAGES_PORTION","IDLE_DELAY_TIME","IDLE_DEBOUNCE","ELEMENT_TEXT","ROUTE_NAMES_MAIN","ROUTE_NAMES_BOOKMARKS","ImageCard","imageSrcPath","imageTitle","handleAddButtonClick","handleRemoveButtonClick","Card","className","CardActionArea","CardMedia","component","height","image","CardContent","Typography","gutterBottom","variant","CardActions","exact","path","Button","size","color","onClick","ImagesContainer","imagesData","useSelector","store","imagesList","imagesInfoList","bookmarks","dispatch","useDispatch","bookmark","page","photo","map","imageEl","farm","server","id","secret","title","imageElSrc","imageAppApi","imagesName","pageNumber","axios","get","then","response","data","pages","perpage","total","isLoading","setImagesInfoData","SET_IMAGES_INFO","setIsLoading","SET_IS_LOADING","getImagesByNameInfo","imageName","a","photos","imagesListReducer","Paginator","searchTerm","searchForm","activePage","allPagesCount","i","push","useState","portionNumber","setPortionNumber","portionCount","Math","ceil","leftPortionPageNumber","rightPortionPageNumber","startIcon","p","searchFormReducer","SET_SEARCH_TERM","toLowerCase","SearchForm","debouncedSearchTerm","value","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","onSubmit","e","preventDefault","onChange","event","searchValue","target","setSearchFormTerm","MainPage","BookmarksPage","SideBar","React","setValue","BottomNavigation","newValue","BottomNavigationAction","Link","to","label","icon","fontSize","IdleMask","seconds","setSeconds","interval","setInterval","clearInterval","Header","responseGoogle","console","log","clientId","render","renderProps","disabled","buttonText","onSuccess","onFailure","cookiePolicy","Footer","App","isIdle","setIsIdle","useIdleTimer","timeout","onIdle","onActive","debounce","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","createStore","localStorage","reduxState","JSON","parse","composeWithDevTools","applyMiddleware","thunkMiddleware","subscribe","stringify","getState","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d038823.chunk.js","sourcesContent":["\r\nenum ACTION_TYPE {\r\n    ADD_BOOKMARK = 'ADD_BOOKMARK',\r\n    REMOVE_BOOKMARK = 'REMOVE_BOOKMARK',\r\n}\r\n\r\nlet initialState = {\r\n    bookmarksList: [String],\r\n}\r\n\r\nconst bookmarksReducer = (state = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.ADD_BOOKMARK: {\r\n            if (state.bookmarksList.includes(action.payload)) {\r\n                return state\r\n            } else return { ...state, bookmarksList: [...state.bookmarksList, action.payload] }\r\n        }\r\n        case ACTION_TYPE.REMOVE_BOOKMARK: {\r\n            return { ...state, bookmarksList: state.bookmarksList.filter((b) => b !== action.payload), }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addBookmark = (bookmark: string) => ({ type: ACTION_TYPE.ADD_BOOKMARK, payload: bookmark });\r\nexport const removeBookmark = (bookmark: string) => ({ type: ACTION_TYPE.REMOVE_BOOKMARK, payload: bookmark });\r\n\r\nexport default bookmarksReducer;\r\n","import { DEFAULT_VALUES } from \"./../shared/const\";\r\nimport { imageAppApi } from \"../services/image-api\";\r\n\r\nenum ACTION_CONST {\r\n  SET_IMAGES_INFO = \"SET_IMAGES_INFO\",\r\n  SET_IS_LOADING = \"SET_IS_LOADING\",\r\n}\r\n\r\nlet initialState = {\r\n  imagesInfoList: {\r\n    page: 0,\r\n    pages: 0,\r\n    perpage: 0,\r\n    total: \"0\",\r\n    photo: [],\r\n  },\r\n  isLoading: DEFAULT_VALUES.FALSE,\r\n};\r\n\r\nconst imagesListReducer = (state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case ACTION_CONST.SET_IMAGES_INFO: {\r\n      return { ...state, imagesInfoList: action.payload };\r\n    }\r\n    case ACTION_CONST.SET_IS_LOADING: {\r\n      return { ...state, isLoading: action.payload };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setImagesInfoData = (imagesInfoList: any) => ({\r\n  type: ACTION_CONST.SET_IMAGES_INFO,\r\n  payload: imagesInfoList,\r\n});\r\n\r\nexport const setIsLoading = (isLoading: boolean) => ({\r\n  type: ACTION_CONST.SET_IS_LOADING,\r\n  payload: isLoading,\r\n});\r\n\r\nexport const getImagesByNameInfo = (\r\n  imageName: string,\r\n  pageNumber: number\r\n) => async (dispatch: (arg0: { type: string; payload: any }) => void) => {\r\n  if (imageName) {\r\n    dispatch(setIsLoading(DEFAULT_VALUES.TRUE));\r\n\r\n    const response = await imageAppApi.getImagesByName(imageName, pageNumber);\r\n\r\n    dispatch(setImagesInfoData(response.photos));\r\n    dispatch(setIsLoading(DEFAULT_VALUES.FALSE));\r\n  } else dispatch(setImagesInfoData(initialState.imagesInfoList));\r\n};\r\n\r\nexport default imagesListReducer;\r\n","export const DEFAULT_VALUES = {\r\n  FIRST_PAGE: 1,\r\n  EMPTY: \"\",\r\n  TRUE: true,\r\n  FALSE: false,\r\n  SEARCH_DELAY_TIME: 500,\r\n  PAGE_SIZE: 100,\r\n  PAGES_PORTION: 5,\r\n  IDLE_DELAY_TIME: 1000 * 60 * 1,\r\n  IDLE_DEBOUNCE: 500,\r\n};\r\n\r\nexport const ELEMENT_TEXT = {\r\n    SUBMIT: 'Submit',\r\n    PREVIOUS: 'Previous',\r\n    BACK: 'Back',\r\n    FORWARD: 'Forward',\r\n    PAGE: 'Page',\r\n    OF: 'of',\r\n    ADD_BUTTON: 'Bookmark it!',\r\n    REMOVE_BUTTON: 'Remove it!',\r\n    NOT_ACTIVE_USER: 'User is not active',\r\n    FOR: 'for',\r\n    SECONDS: 'seconds.',\r\n    EMPTY_IMAGE_CONTAINER: 'No images here. Would you try to search for anything else?',\r\n    APP_NAME: 'Image Finder',\r\n    COPYRIGHTS: 'Copyrights',\r\n}\r\n\r\nexport const ROUTE_NAMES_MAIN = 'main';\r\nexport const ROUTE_NAMES_BOOKMARKS = 'bookmarks';\r\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport {\n  Button,\n  Card,\n  CardActionArea,\n  CardActions,\n  CardContent,\n  CardMedia,\n  Typography,\n} from \"@material-ui/core\";\nimport \"./ImageCard.scss\";\nimport { ELEMENT_TEXT, ROUTE_NAMES_BOOKMARKS, ROUTE_NAMES_MAIN } from \"../../shared/const\";\n\ntype TProps = {\n  imageSrcPath: string;\n  handleAddButtonClick: any;\n  handleRemoveButtonClick: any;\n  imageTitle?: string;\n};\n\nconst ImageCard: React.FC<TProps> = ({\n  imageSrcPath,\n  imageTitle,\n  handleAddButtonClick,\n  handleRemoveButtonClick,\n}) => {\n  return (\n    <Card className=\"ImageCard\">\n      <CardActionArea>\n        <CardMedia component=\"img\" height=\"180\" image={imageSrcPath} />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {imageTitle}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        <Route exact path={`/${ROUTE_NAMES_MAIN}`}>\n          <Button\n            size=\"small\"\n            color=\"primary\"\n            onClick={() => handleAddButtonClick(imageSrcPath)}\n          >\n            {ELEMENT_TEXT.ADD_BUTTON}\n          </Button>\n        </Route>\n        <Route exact path={`/${ROUTE_NAMES_BOOKMARKS}`}>\n          <Button\n            size=\"small\"\n            color=\"primary\"\n            onClick={() => handleRemoveButtonClick(imageSrcPath)}\n          >\n            {ELEMENT_TEXT.REMOVE_BUTTON}\n          </Button>\n        </Route>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default ImageCard;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport \"./ImagesContainer.scss\";\nimport { addBookmark, removeBookmark } from \"../../redux/bookmarks-reducer\";\nimport { Route } from \"react-router-dom\";\nimport ImageCard from \"../ImageCard/ImageCard\";\nimport { IImageData } from \"../../shared/interfaces\";\nimport { ELEMENT_TEXT, ROUTE_NAMES_BOOKMARKS, ROUTE_NAMES_MAIN } from \"../../shared/const\";\n\nconst ImagesContainer: React.FC = () => {\n  const imagesData = useSelector(\n    (store: any) => store.imagesList.imagesInfoList\n  );\n  const bookmarksList = useSelector(\n    (store: any) => store.bookmarks.bookmarksList\n  );\n\n  const dispatch = useDispatch();\n\n  const handleAddButtonClick = (imageSrcPath: string) => {\n    dispatch(addBookmark(imageSrcPath));\n  };\n\n  const handleRemoveButtonClick = (imageSrcPath: string) => {\n    dispatch(removeBookmark(imageSrcPath));\n  };\n\n  return (\n    <div className=\"ImagesContainer\">\n      <Route exact path={`/${ROUTE_NAMES_MAIN}`}>\n        {imagesData.page\n          ? imagesData.photo.map((imageEl: IImageData) => {\n            //TODO\n              const imageSrcPath = `https://farm${imageEl.farm}.staticflickr.com/${imageEl.server}/${imageEl.id}_${imageEl.secret}.jpg`;\n\n              if (imageSrcPath) {\n                return (\n                  <ImageCard\n                    key={imageEl.id}\n                    imageSrcPath={imageSrcPath}\n                    imageTitle={imageEl.title}\n                    handleAddButtonClick={handleAddButtonClick}\n                    handleRemoveButtonClick={handleRemoveButtonClick}\n                  />\n                );\n              }\n            })\n          : `${ELEMENT_TEXT.EMPTY_IMAGE_CONTAINER}`}\n      </Route>\n      <Route exact path={`/${ROUTE_NAMES_BOOKMARKS}`}>\n        {bookmarksList.map((imageElSrc: string):JSX.Element | undefined => {\n          if (imageElSrc) {\n            return (\n              <ImageCard\n                key={imageElSrc}\n                imageSrcPath={imageElSrc}\n                handleAddButtonClick={handleAddButtonClick}\n                handleRemoveButtonClick={handleRemoveButtonClick}\n              />\n            );\n           }\n        })}\n      </Route>\n    </div>\n  );\n};\n\nexport default ImagesContainer;\n","import { API_KEY } from '../api-keys/api-keys';\r\nimport axios from \"axios\";\r\n\r\nconst FLICKR_API = \"https://www.flickr.com/services/rest/?\";\r\nconst FliCKR_API_METHOD = \"method=flickr.photos.search\";\r\nconst FLICKR_FORMAT = \"format=json&nojsoncallback=1\";\r\n\r\n\r\nexport const imageAppApi = {\r\n  getImagesByName(imagesName: string, pageNumber: number) {\r\n    return axios.get(`${FLICKR_API}${FliCKR_API_METHOD}&api_key=${API_KEY}&text=${imagesName}&page=${pageNumber}&${FLICKR_FORMAT}`)\r\n    .then((response) => {\r\n      return response.data;\r\n    });\r\n  },\r\n};\r\n","export const API_KEY = 'de58ac752340901ded737da22c3fe0c0';\r\n","\r\nenum ACTION_TYPE {\r\n    SET_SEARCH_TERM = 'SET_SEARCH_TERM',\r\n}\r\n\r\nlet initialState = {\r\n    searchTerm: '',\r\n}\r\n\r\nconst searchFormReducer = (state = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case ACTION_TYPE.SET_SEARCH_TERM: {\r\n            return { ...state, searchTerm: action.payload.toLowerCase() }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setSearchFormTerm = (searchTerm: string) => ({ type: ACTION_TYPE.SET_SEARCH_TERM, payload: searchTerm });\r\n\r\nexport default searchFormReducer;\r\n","import React, { useState } from \"react\";\nimport \"./Paginator.scss\";\nimport { Button } from \"@material-ui/core\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport ArrowForwardIcon from \"@material-ui/icons/ArrowForward\";\nimport { DEFAULT_VALUES, ELEMENT_TEXT } from \"../../shared/const\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getImagesByNameInfo } from \"../../redux/imagesList-reducer\";\n\nconst PREVIOUS_NUMBER = 1;\nconst NEXT_NUMBER = 1;\n\nconst Paginator: React.FC = () => {\n  const dispatch = useDispatch();\n  const searchTerm = useSelector(\n    (store: any) => store.searchForm.searchTerm\n  );\n  const activePage = useSelector(\n    (store: any) => store.imagesList.imagesInfoList.page\n  );\n  const allPagesCount = useSelector(\n    (store: any) => store.imagesList.imagesInfoList.pages\n  );\n\n  const pages = [];\n\n  for (let i = 1; i <= allPagesCount; i++) {\n      pages.push(i);\n  }\n\n  const [portionNumber, setPortionNumber] = useState(1);\n\n  const portionCount = Math.ceil(allPagesCount / DEFAULT_VALUES.PAGES_PORTION);\n  const leftPortionPageNumber = (portionNumber - PREVIOUS_NUMBER) * DEFAULT_VALUES.PAGES_PORTION + NEXT_NUMBER;\n  const rightPortionPageNumber = portionNumber * DEFAULT_VALUES.PAGES_PORTION;\n\n  const onPageChanged = (page: number): void => {\n      dispatch(\n        getImagesByNameInfo(searchTerm, page)\n      );\n  };\n\n  return (\n    <div className=\"Paginator\">\n      {portionNumber > 1 && (\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"small\"\n          onClick={() => setPortionNumber(portionNumber - PREVIOUS_NUMBER)}\n          startIcon={<ArrowBackIcon />}\n        >\n          {ELEMENT_TEXT.BACK}\n        </Button>\n      )}\n      {activePage !== 0 && ELEMENT_TEXT.PAGE}\n      {pages\n        .filter(\n          (p) => p >= leftPortionPageNumber && p <= rightPortionPageNumber\n        )\n        .map((p) => {\n          return (\n            <span\n              key={p}\n              className={`${activePage === p && \"selected-page\"}`}\n              onClick={() => {\n                onPageChanged(p);\n              }}\n            >\n              {p}\n            </span>\n          );\n        })}\n     {activePage !== 0 && <span> {ELEMENT_TEXT.OF} {allPagesCount}</span>}\n      {portionCount > portionNumber && (\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"small\"\n          onClick={() => setPortionNumber(portionNumber + NEXT_NUMBER)}\n          startIcon={<ArrowForwardIcon />}\n        >\n          {ELEMENT_TEXT.FORWARD}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default Paginator;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useDebounce from \"../../hooks/useDebounce\";\nimport { getImagesByNameInfo } from \"../../redux/imagesList-reducer\";\nimport { setSearchFormTerm } from \"../../redux/searchForm-reducer\";\nimport { DEFAULT_VALUES } from \"../../shared/const\";\nimport \"./SearchForm.scss\";\n\nconst SearchForm: React.FC = () => {\n  const dispatch = useDispatch();\n  \n  const searchTerm = useSelector(\n    (store: any) => store.searchForm.searchTerm\n  );\n\n  const debouncedSearchTerm = useDebounce(\n    searchTerm,\n    DEFAULT_VALUES.SEARCH_DELAY_TIME\n  );\n  const activePage = useSelector(\n    (store: any) => store.imagesList.imagesInfoList.page\n  );\n  const isLoading = useSelector(\n    (store: any) => store.imagesList.isLoading\n  );\n\n  useEffect(() => {\n    if (debouncedSearchTerm) {\n      dispatch(\n        getImagesByNameInfo(searchTerm, activePage || DEFAULT_VALUES.FIRST_PAGE)\n      );\n    }\n  }, [activePage, debouncedSearchTerm, dispatch, searchTerm]);\n\n  const handleOnInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const searchValue = event.target.value;\n\n    dispatch(setSearchFormTerm(searchValue))\n  };\n\n  const handleOnSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n\n    if (searchTerm) {\n      dispatch(\n        getImagesByNameInfo(searchTerm, activePage || DEFAULT_VALUES.FIRST_PAGE)\n      );\n    }\n  };\n\n  return (\n    <form className='SearchForm' onSubmit={handleOnSubmit}>\n      <input className='SearchInput' value={searchTerm} onChange={handleOnInputChange}></input>\n      {isLoading && <div>Searching ...</div>}\n    </form>\n  );\n};\n\nexport default SearchForm;\n","import React, { useState, useEffect } from \"react\";\r\n\r\nexport default function useDebounce(value: any, delay: number) {\r\n  const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n    \r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [delay, value]);\r\n\r\n  return debouncedValue;\r\n}\r\n","import React from 'react';\nimport ImagesContainer from '../ImagesContainer/ImagesContainer';\nimport Paginator from '../Paginator/Paginator';\nimport SearchForm from '../SearchForm/SearchForm';\nimport './MainPage.scss';\n\nconst MainPage: React.FC = () => (\n  <div className=\"MainPage\">\n    <SearchForm />\n    <Paginator />\n    <ImagesContainer />\n  </div>\n);\n\nexport default MainPage;\n","import React from 'react';\nimport ImagesContainer from '../ImagesContainer/ImagesContainer';\nimport './BookmarksPage.scss';\n\nconst BookmarksPage: React.FC = () => (\n  <div className=\"BookmarksPage\">\n    BookmarksPage Component\n    <ImagesContainer />\n  </div>\n);\n\nexport default BookmarksPage;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport CloudIcon from \"@material-ui/icons/Cloud\";\nimport BookmarksIcon from \"@material-ui/icons/Bookmarks\";\nimport \"./SideBar.scss\";\nimport { BottomNavigation, BottomNavigationAction } from \"@material-ui/core\";\nimport { ROUTE_NAMES_BOOKMARKS, ROUTE_NAMES_MAIN } from \"../../shared/const\";\n\nconst SideBar: React.FC = () => {\n  const [value, setValue] = React.useState('main');\n\n  const handleChange = (event: any, newValue: React.SetStateAction<string>) => {\n    setValue(newValue);\n  };\n  return (\n    <div className=\"SideBar\">\n      <BottomNavigation value={value} onChange={handleChange} className=\"Nav\">\n        <BottomNavigationAction\n          component={Link}\n          to={ROUTE_NAMES_MAIN}\n          label=\"Main\"\n          value={ROUTE_NAMES_MAIN}\n          className=\"NavLink\"\n          icon={<CloudIcon fontSize=\"large\" />}\n        />\n        <BottomNavigationAction\n          component={Link}\n          to={ROUTE_NAMES_BOOKMARKS}\n          label=\"Bookmarks\"\n          value={ROUTE_NAMES_BOOKMARKS}\n          className=\"NavLink\"\n          icon={<BookmarksIcon fontSize=\"large\" />}\n        />\n      </BottomNavigation>\n    </div>\n  );\n};\n\nexport default SideBar;\n","import React, { useEffect, useState } from \"react\";\nimport { ELEMENT_TEXT } from \"../../shared/const\";\nimport \"./IdleMask.scss\";\n\nconst IdleMask: React.FC = () => {\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds((seconds) => seconds + 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [seconds]);\n\n  return (\n    <div className=\"IdleMask\">\n      {ELEMENT_TEXT.NOT_ACTIVE_USER} {ELEMENT_TEXT.FOR} {seconds}{\" \"}\n      {ELEMENT_TEXT.SECONDS}\n    </div>\n  );\n};\n\nexport default IdleMask;\n","import React from 'react';\nimport { ELEMENT_TEXT } from '../../shared/const';\nimport './Header.scss';\nimport { GoogleLogin } from 'react-google-login';\n\nconst Header: React.FC = () => {\n  const responseGoogle = (response: any) => {\n    console.log(response);\n  }\n  return (\n  <div className=\"Header\">\n    {ELEMENT_TEXT.APP_NAME}\n    <GoogleLogin\n    clientId=\"459175857441-p5479p7qs6qjllf3p7n3f7678800h1li.apps.googleusercontent.com\"\n    render={renderProps => (\n      <button onClick={renderProps.onClick} disabled={renderProps.disabled}>This is my custom Google button</button>\n    )}\n    buttonText=\"Login\"\n    onSuccess={responseGoogle}\n    onFailure={responseGoogle}\n    cookiePolicy={'single_host_origin'}\n  />,\n  </div>\n)\n    };\n\nexport default Header;\n","import React from 'react';\nimport { ELEMENT_TEXT } from '../../shared/const';\nimport './Footer.scss';\n\nconst Footer: React.FC = () => (\n  <div className=\"Footer\">\n    {ELEMENT_TEXT.COPYRIGHTS}\n  </div>\n);\n\nexport default Footer;\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport { useIdleTimer } from 'react-idle-timer'\nimport MainPage from \"./components/MainPage/MainPage\";\nimport BookmarksPage from \"./components/BookmarksPage/BookmarksPage\";\nimport SideBar from \"./components/SideBar/SideBar\";\nimport { DEFAULT_VALUES, ROUTE_NAMES_BOOKMARKS, ROUTE_NAMES_MAIN } from \"./shared/const\";\nimport IdleMask from \"./components/IdleMask/IdleMask\";\nimport Header from \"./components/Header/Header\";\nimport Footer from \"./components/Footer/Footer\";\n\nfunction App() {\n  const [isIdle, setIsIdle] = useState(DEFAULT_VALUES.FALSE);\n  \n  const handleOnIdle = () => {\n    //TODO Last user usage\n    // console.log('last active', getLastActiveTime())\n    setIsIdle(DEFAULT_VALUES.TRUE);\n  }\n\n  const handleOnActive = () => {\n    setIsIdle(DEFAULT_VALUES.FALSE);\n  }\n\n  useIdleTimer({\n    timeout: DEFAULT_VALUES.IDLE_DELAY_TIME,\n    onIdle: handleOnIdle,\n    onActive: handleOnActive,\n    debounce: DEFAULT_VALUES.IDLE_DEBOUNCE,\n  })\n\n  return (\n    <div className=\"App\">\n      {isIdle && <IdleMask />}\n      <HashRouter>\n        <Header />\n        <SideBar />\n        <Route exact path={`/${ROUTE_NAMES_MAIN}`}>\n          <MainPage />\n        </Route>\n        <Route exact path={`/${ROUTE_NAMES_BOOKMARKS}`}>\n          <BookmarksPage />\n        </Route>\n        <Footer />\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\n\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport searchFormReducer from \"./searchForm-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport imagesListReducer from \"./imagesList-reducer\";\r\nimport bookmarksReducer from \"./bookmarks-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n  imagesList: imagesListReducer,\r\n  searchForm: searchFormReducer,\r\n  bookmarks: bookmarksReducer,\r\n});\r\n\r\nlet initialState = {};\r\n\r\nlet store = createStore(\r\n  reducers,\r\n  localStorage.reduxState ? JSON.parse(localStorage.reduxState) : initialState,\r\n  composeWithDevTools(applyMiddleware(thunkMiddleware))\r\n);\r\n\r\nstore.subscribe(\r\n  () => (localStorage.reduxState = JSON.stringify(store.getState()))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}